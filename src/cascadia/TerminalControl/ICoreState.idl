// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

namespace Microsoft.Terminal.Control
{

    struct MenuEntry
    {
        String Name;
        String Comment;
        String Input;
    };

    // Why are there two here?
    // Because when adding a mark, you want one and only one flag set.
    // When showing the scrollbar, you want any number of flags.
    // Separating these allows for the settings serialization to change how they are serialized, parsed, and displayed.

// TODO! this is dumb. Have different types at the MTSM layer, and then convert
// to Control::MarkCategory at the end. So these two would both be
// MTSM::MarkCategory & MTSM::MarkFilter, and then in the handler we'd convert
// them to the control version.
    enum MarkCategory
    {
        Prompt = 1,
        Error = 2,
        Warning = 4,
        Success = 8,
        Info = 16
    };
    [flags]
    enum MarkFilter
    {
        Prompt = 1,
        Error = 2,
        Warning = 4,
        Success = 8,
        Info = 16
    };

    struct ScrollMark
    {
        Microsoft.Terminal.Core.Color Color;
        Microsoft.Terminal.Core.Point Start;
        Microsoft.Terminal.Core.Point End; // exclusive
        // UInt64 timestamp;
        MarkCategory Category;
        String Comment;
    };

    // These are properties of the TerminalCore that should be queryable by the
    // rest of the app.
    interface ICoreState
    {
        String Title { get; };
        UInt64 TaskbarState { get; };
        UInt64 TaskbarProgress { get; };

        String WorkingDirectory { get; };

        Windows.Foundation.IReference<Windows.UI.Color> TabColor { get; };

        Int32 ScrollOffset { get; };
        Int32 ViewHeight { get; };
        Int32 BufferHeight { get; };

        Boolean BracketedPasteEnabled { get; };

        Microsoft.Terminal.TerminalConnection.ConnectionState ConnectionState { get; };

        Microsoft.Terminal.Core.Scheme ColorScheme { get; set; };

        IVector<MenuEntry> MenuEntries { get; };
        IVector<ScrollMark> ScrollMarks { get; };

        void AddMark(ScrollMark mark);
        void ClearMark();
        void ClearAllMarks();
        UInt64 OwningHwnd;

    };
}
